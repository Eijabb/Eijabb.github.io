#!perl

=head2 Name

Extract by control number -- given a file of control numbers, extracts USMARC records from a file with matching control 

=head2 Outline

Reads file name from input line for file of control numbers.
Reads file name from input line for base file of MARC records. 
Reads input line for name of output file (MARC format).
Spits out MARC records with control number matching something in the file of control numbers
Prompts for new export filename after every 150 records. 

=head2 TO DO

Clean control numbers in both MARC and control number files, removing ending spaces and other data after control number.

=cut

###########################
### Initialize includes ###
### and basic needs     ###
###########################
use strict 'vars';
use MARC::Batch;
use MARC::BBMARC;

##Time coding to wrap around program to determine how long execution takes:

##########################
## Time coding routines ##
## Print start time and ##
## set start variable   ##
##########################

use Time::HiRes qw(  tv_interval );
# measure elapsed time 
# (could also do by subtracting 2 gettimeofday return values)
my $t0 = [Time::HiRes::time()];
my $startingtime = MARC::BBMARC::startstop_time();
# do bunch of stuff here
#########################
### Start main program ##
#########################

print ("\n\nWelcome to the MARC record extraction by control number\n");
## function call will prompt for filename of control number file
my @extractcontrolnos = MARC::BBMARC::read_controlnos();
#compare extractioncount with count of records extracted
#they should match

my $extractioncount = (scalar @extractcontrolnos);

#read command line for name of base file
print ("Base record file:");
my $basefile=<>;
chomp $basefile;
## remove quotes around dropped in file name for DOS
$basefile =~ s/^\"(.*)\"$/$1/;
print ("Export record file:");
#read command line for name of export file
my $exportfile= <>;
chomp $exportfile;
$exportfile =~ s/^\"(.*)\"$/$1/;

open(OUTRAW, ">$exportfile") or die "cannot open outraw";
#if using MacPerl, set creator and type to BBEdit and Text
if ($^O eq 'MacOS') {
MacPerl::SetFileInfo('R*ch', 'TEXT', $exportfile);
}
#initialize $batch as new batch object
my $batch = MARC::Batch->new('USMARC', "$basefile");

#create local script-based record counter
my $reccount=0;
my $extractedcount=0;
############################################
# Set start time for main calculation loop #
############################################
my $t1 = [Time::HiRes::time()];
my $runningrecordcount=0;

while ( my $record = $batch->next()) {

#get the control number of the base record
my $origcontrolno = $record->field('001')->as_string() if $record->field('001');

#compare base record controlno with numbers to extract
my @grepcontrolno = grep {$_ eq $origcontrolno} @extractcontrolnos;

### if record matches, output it ###
if (@grepcontrolno) {
##################################
### output MARC record ###
##################################
print OUTRAW ($record->as_usmarc());
$extractedcount++;
@grepcontrolno = ();
#every 150 records, create new output file
if ($extractedcount%150 == 0) {
close OUTRAW;
print ("New export record file:");
#read command line for name of export file
my $exportfile= <>;
chomp $exportfile;
$exportfile =~ s/^\"(.*)\"$/$1/;
open(OUTRAW, ">$exportfile") or die "cannot open new outraw";
}
}

###### print if count mods with constant in BBMARC #####
$runningrecordcount++;
MARC::BBMARC::counting_print ($runningrecordcount);
} #while 

print ("$extractedcount records extracted\n$extractioncount records would have been extracted if they had been found\n");
close OUTRAW;


##########################
### Main program done.  ##
### Report elapsed time.##
##########################

my $elapsed = tv_interval ($t0);
my $calcelapsed = tv_interval ($t1);
print sprintf ("%.4f %s\n", "$elapsed", "seconds from execution\n");
print sprintf ("%.4f %s\n", "$calcelapsed", "seconds to calculate\n");
my $endingtime = MARC::BBMARC::startstop_time();
print "Started at $startingtime\nEnded at $endingtime";

print "\n\nPress Enter to quit";
<>;

#####################
### END OF PROGRAM ##
#####################

=head1 LICENSE

This code may be distributed under the same terms as Perl itself. 

Please note that this code is not a product of or supported by the 
employers of the various contributors to the code.

=head1 AUTHOR

Bryan Baldus
eija [at] inwave [dot] com

Copyright (c) 2003-2004

=cut