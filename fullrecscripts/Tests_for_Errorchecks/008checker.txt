#!perl


=head1 DESCRIPTION

Code for validating 008s in MARC records.
Outputs Control number, any miscoded bytes, and the original 008 string.
Each is separated by a tab.
Includes commented-out print statements for individual 008 byte position hash.

=cut

###########################
### Initialize includes ###
### and basic needs     ###
###########################
use strict;
use MARC::Batch;
use MARC::BBMARC;
##########################
## Time coding routines ##
## Print start time and ##
## set start variable   ##
##########################

use Time::HiRes qw(  tv_interval );
# measure elapsed time 
my $t0 = [Time::HiRes::time()];
my $startingtime = MARC::BBMARC::startstop_time();
#########################
### Start main program ##
#########################

print ("Welcome to 008 validation script\n");

##### File handling initialization ######
#prompt for input file
print ("What is the input file? ");
my $inputfile=<>;
chomp $inputfile;
$inputfile =~ s/^\"(.*)\"$/$1/;
print ("What is the export file? ");
my $exportfile = <>;
chomp $exportfile;
$exportfile =~ s/^\"(.*)\"$/$1/;
open(OUT, ">$exportfile");
#if using MacPerl, set creator and type to BBEdit and Text
if ($^O eq 'MacOS') {
MacPerl::SetFileInfo('R*ch', 'TEXT', $exportfile);
}

#initialize $batch as new MARC::Batch object
my $batch = MARC::Batch->new('USMARC', "$inputfile");
########## Start extraction #########

############################################
# Set start time for main calculation loop #
############################################
my $t1 = [Time::HiRes::time()];
my $runningrecordcount=0;
###################################################
my $badcount = 0;

#### Start while loop through records in file #####
while (my $record = $batch->next()) {

my $leader = $record->leader();
my $controlno = $record->field('001')->as_string();

#$mattype and $biblvl are from LDR/06 and LDR/07
my $mattype = substr($leader, 6, 1); 
my $biblvl = substr($leader, 7, 1);
my $field008 = $record->field('008')->as_string();

my ($validatedhashref, $cleaned008ref, $badcharsref) = MARC::BBMARC::validate008($field008, $mattype, $biblvl);
my %validatedhash = %$validatedhashref;
my @cleaned008arr = @$cleaned008ref;
my $badchars = $$badcharsref;
#foreach my $key (sort keys %validatedhash) {
#print "$key => $validatedhash{$key}\n";
#}
#
#print OUT join ('', @cleaned008arr, "\n");


if ($badchars) {
print OUT "$controlno\t$badchars\t$field008\n";
$badcount++;
}


###################################################
### add to count for user notification ###
$runningrecordcount++;
MARC::BBMARC::counting_print ($runningrecordcount);
###################################################
} # while

close $inputfile;
close OUT;

print "$badcount records had bad 008\n";

##########################
### Main program done.  ##
### Report elapsed time.##
##########################
print "\n";
my $elapsed = tv_interval ($t0);
my $calcelapsed = tv_interval ($t1);
print sprintf ("%.4f %s\n", "$elapsed", "seconds from execution\n");
print sprintf ("%.4f %s\n", "$calcelapsed", "seconds to calculate\n");
my $endingtime = MARC::BBMARC::startstop_time();
print "Started at $startingtime\nEnded at $endingtime";

print "Press Enter to continue (multiple times if necessary)";
<>;

#####################
### END OF PROGRAM ##
#####################
=head1 LICENSE

This code may be distributed under the same terms as Perl itself. 

Please note that this code is not a product of or supported by the 
employers of the various contributors to the code.

=head1 AUTHOR

Bryan Baldus
eija [at] inwave [dot] com

Copyright (c) 2003-2004

=cut